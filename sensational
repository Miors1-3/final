fuck u skids

				Callback = function()
					Flags.ChangeSpeed:Set({
						CurrentValue = not Flags.ChangeSpeed.CurrentValue,
					})
				end,
			}
		},
		{
			Element = "Divider",
			Info = {}
		},
		{
			Element = "Toggle",
			Info = {
				Name = "Infinite Jump",
				Flag = "InfJump",
				Callback = function()
					if Flags.InfJump.CurrentValue then
						if not InfJumpConnection then
							InfJumpConnection = UserInputService.JumpRequest:Connect(function()
								if Flags.InfJump.CurrentValue and SpacePressed then
									if Player.Character then
										local Humanoid = Player.Character:FindFirstChildWhichIsA("Humanoid")
										if Humanoid then
											Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
										end
									end
								end
							end)
							HandleConnection(InfJumpConnection, "InfJumpConnection")
						end
					else
						if InfJumpConnection then
							InfJumpConnection:Disconnect()
							InfJumpConnection = nil
						end
					end
				end
			}
		},
	},
	HideIdentity = {
		{
			Element = "Toggle",
			Info = {
				Name = "Hide Identity",
				Flag = "HideIdentity",
				Callback = function()
					if Flags.HideIdentity.CurrentValue and not DescendantAddedConnection then
						for i,v in game:GetDescendants() do
							HandleUsernameChange(v)
						end

						DescendantAddedConnection = game.DescendantAdded:Connect(HandleUsernameChange)

						HandleConnection(DescendantAddedConnection, "HideIdentity")
					elseif DescendantAddedConnection then
						DescendantAddedConnection:Disconnect()
						DescendantAddedConnection = nil

						for Object, Text in OriginalText do
							Object.Text = Text
						end

						OriginalText = {}
					end
				end,
			}
		},
		{
			Element = "Input",
			Info = {
				Name = "Name To Replace With",
				Description = "The name that will replace your name in the game",
				CurrentValue = "Miorsigma",
				PlaceholderText = "New Name Here",
				RemoveTextAfterFocusLost = false,
				Numeric = false,
				Enter = false,
				MaxCharacters = nil,
				Flag = "NameReplacement",
			}
		}
	}
}

getgenv().CreateFeature = function(Tab: Tab, FeatureName: string)
	if not Features[FeatureName] then
		return warn(`The feature '{FeatureName}' does not exist in the Features.`)
	end
	
	for _, Data in Features[FeatureName] do
		Tab[`Create{Data.Element}`](Tab, Data.Info, Data.Info.Flag)
	end
end

getgenv().CreateUniversalTabs = function()
	Luna:LoadAutoloadConfig()

	task.wait(1)

	for FlagName: string, CurrentValue: boolean? in OriginalFlags do
		local FlagInfo = Flags[FlagName]

		if not FlagInfo then
			continue
		end

		FlagInfo:Set({
			CurrentValue = CurrentValue,
		})
	end

	Notify("Sensational", `Loaded in {math.floor((tick() - StartLoadTime) * 10) / 10}s`, "loader", "Lucide")
end

local Started = getgenv().Started

if Started then
	Started()
end
